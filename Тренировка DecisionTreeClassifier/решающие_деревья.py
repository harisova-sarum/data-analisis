# -*- coding: utf-8 -*-
"""Решающие деревья.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xZN89TxieYzMcROON5HWbwcSB97jULa_
"""

from sklearn import tree
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from graphviz import Source
import numpy as np
from IPython.display import SVG
#sns.set(rc={'figure.figsize': (9,6)})

"""**X_1, X-2, Y**"""

data = pd.DataFrame({'X_1': [1, 1, 1, 0, 0, 0, 0, 1],
                     'X_2': [0, 0, 0, 1, 0, 0, 0, 1],
                     'Y': [1, 1, 1, 1, 0, 0, 0, 0]})

data

clf = tree.DecisionTreeClassifier(criterion='entropy')

# Фичи
X = data[['X_1','X_2']]
# Целевая переменная
y = data.Y

clf.fit(X,y)

graph = Source(tree.export_graphviz(clf, out_file = None,
                             feature_names = list(X),
                             class_names = ['Negative', 'Positive'],
                             filled = True))

graph
#%%
"""**Котики/собачки**"""

data1 = pd.read_csv('https://stepik.org/media/attachments/course/4852/dogs.csv')

data1.head()

data1.info()

data2 = pd.read_csv('https://stepik.org/media/attachments/course/4852/cats.csv')

data2.head()

data2.info()

data2

# Фичи
X = data2[['Лазает по деревьям']]
# Целевая переменная
y = data2['Вид']

clf = tree.DecisionTreeClassifier(criterion='entropy')

clf.fit(X,y)

Source(tree.export_graphviz(clf, out_file = None,
                             feature_names = list(X),
                             class_names = ['Negative', 'Positive'],
                             filled = True))

-1/5*np.log2(1/5)-4/5*np.log2(4/5)

-0.6*np.log2(0.6)-0.4*np.log2(0.4)

0.97 - 0.5*0.72

"""**Titanic**"""

titanic_data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/train.csv")

titanic_data.head()

titanic_data.isnull().sum()

X = titanic_data.drop(['PassengerId','Survived','Name','Ticket','Cabin'], axis = 1)
y = titanic_data.Survived

X = pd.get_dummies(X)

X = X.fillna({'Age': X.Age.median()})

X.isnull().sum()

"""Переобучение"""

clf = tree.DecisionTreeClassifier(criterion = 'entropy')

clf.fit(X,y)

graph = Source(tree.export_graphviz(clf, out_file = None,
                             feature_names = list(X),
                             class_names = ['Died', 'Survived'],
                             filled = True))

display(SVG(graph.pipe(format='svg')))

"""Использование двух наборов данных и ограничение потребности дерева расти как можно глубже  (для тестов используется один и тот же набор)"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.33, random_state = 42)

X_train.shape, X_test.shape

clf.score(X,y)

clf.fit(X_train,y_train)

clf.score(X_train,y_train)

clf.score(X_test,y_test)

clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth = 3)

clf.fit(X_train,y_train)

clf.score(X_train,y_train)

clf.score(X_test,y_test)

max_depth_values = range(1,100)

scors_data = pd.DataFrame()

for max_depth in max_depth_values:
  clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth = max_depth)
  clf.fit(X_train,y_train)
  train_score = clf.score(X_train,y_train)
  test_score = clf.score(X_test,y_test)

  temp_score_data = pd.DataFrame({'max_depth': [max_depth],
                                  'train_score': [train_score],
                                  'test_score': [test_score]})
  scors_data = scors_data.append(temp_score_data)

scors_data.head()

scors_data_long = pd.melt(scors_data, id_vars = ['max_depth'], value_vars = ['train_score','test_score'],
                          var_name = 'set_type', value_name = 'score')

scors_data_long.head()

sns.lineplot(x= 'max_depth',y= 'score', hue = 'set_type', data = scors_data_long)

"""**Кросс-валидация**


Раздлелим тренировочный набор на есколько выборок. Для каждой глубины дерева будем убирать одну тестовую выборку и усреднять accuracy
"""

from sklearn.model_selection import cross_val_score

clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth = 4)

cross_val_score(clf, X_train, y_train, cv = 5)

max_depth_values = range(1,100)

scors_data = pd.DataFrame()

for max_depth in max_depth_values:
  clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth = max_depth)
  clf.fit(X_train,y_train)
  train_score = clf.score(X_train,y_train)
  test_score = clf.score(X_test,y_test)
  mean_cross_val_score = cross_val_score(clf, X_train, y_train, cv = 5).mean()

  temp_score_data = pd.DataFrame({'max_depth': [max_depth],
                                  'train_score': [train_score],
                                  'test_score': [test_score],
                                  'cross_val_score': [mean_cross_val_score]})
  scors_data = scors_data.append(temp_score_data)

scors_data.head()

scors_data_long = pd.melt(scors_data, id_vars = ['max_depth'], value_vars = ['train_score','test_score','cross_val_score'],
                          var_name = 'set_type', value_name = 'score')

scors_data_long.query("set_type == 'cross_val_score'").head(15)

sns.lineplot(x= 'max_depth',y= 'score', hue = 'set_type', data = scors_data_long)

best_clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth = 9)

cross_val_score(best_clf, X_test, y_test, cv = 5).mean()

"""**Ирисы**"""

from sklearn.metrics import accuracy_score

iris = pd.read_csv('https://stepik.org/media/attachments/course/4852/train_iris.csv')

iris.head()

X = iris.drop(['Unnamed: 0','species'], axis = 1)
y = iris.species

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.5, random_state = 42)

max_depth_values = range(1,100)

for max_depth in max_depth_values:
  clf = tree.DecisionTreeClassifier(random_state=0,criterion = 'entropy', max_depth = max_depth)
  clf.fit(X_train,y_train)
  train_score = clf.score(X_train,y_train)
  test_score = accuracy_score(y_train,y_test)

  temp_score_data = pd.DataFrame({'max_depth': [max_depth],
                                  'train_score': [train_score],
                                  'test_score': [test_score]})
  scors_data = scors_data.append(temp_score_data)

scors_data_long = pd.melt(scors_data, id_vars = ['max_depth'], value_vars = ['train_score','test_score'],
                          var_name = 'set_type', value_name = 'score')

sns.lineplot(x= 'max_depth', y= 'score', hue = 'set_type', data = scors_data_long)

"""Котики и собачки"""

cats_and_dogs = pd.read_csv('https://stepik.org/media/attachments/course/4852/dogs_n_cats.csv')

cats_and_dogs.head()

X = cats_and_dogs.drop(['Вид'], axis = 1)
y = cats_and_dogs['Вид']

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
le.fit(y)
le.transform(y)

X_train, y_train = train_test_split(X,y, test_size = 0.33, random_state = 42)

max_depth_values = range(1,100)

scors_data = pd.DataFrame()

cross_val_score(clf, X_train, y_train, cv = 5)

for max_depth in max_depth_values:
  clf = tree.DecisionTreeClassifier(criterion = 'entropy', max_depth = max_depth)
  clf.fit(X_train,y_train)
  train_score = clf.score(X_train,y_train)
  mean_cross_val_score = cross_val_score(clf, X_train, y_train, cv = 5).mean()

  temp_score_data = pd.DataFrame({'max_depth': [max_depth],
                                  'train_score': [train_score],
                                  'cross_val_score': [mean_cross_val_score]})
  scors_data = scors_data.append(temp_score_data)

scors_data_long = pd.melt(scors_data, id_vars = ['max_depth'], value_vars = ['train_score','cross_val_score'],
                          var_name = 'set_type', value_name = 'score')

scors_data_long.head()

sns.lineplot(x= 'max_depth',y= 'score', hue = 'set_type', data = scors_data_long)